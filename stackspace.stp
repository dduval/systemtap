/*
 * By Dominic Duval, Red Hat Inc.
 * dduval@redhat.com
 * 
 * Collect information about the amount of stack stace available
 * function called in the kernel.
 *
 * USAGE: stap stackspace.stp function
 *
 */

global min_free_stack, pid2name

probe begin {
  printf("Collecting stack data... for %s\n", @1)
  printf("Type Ctrl-C to exit and display results\n")
}

probe kernel.function(@1).return {
  pid = pid()

  if (!(pid in pid2name)) pid2name[pid] = execname()

  unused = stack_unused()

  if ((min_free_stack[pid]) == 0) 
    min_free_stack[pid] = unused

  if ((min_free_stack[pid]) > unused ) {
    printf("[PID %d] From %d to %d (-%d)\n",
      pid, min_free_stack[pid], unused, min_free_stack[pid]-unused)
    min_free_stack[pid] = unused
  }
}

probe end
{
  printf("%-8s %-16s %-8s\n", "PID", "NAME", "MIN_FREE")

  foreach ([pid] in min_free_stack-) {
    printf("%-8d %-16s %-8d\n", pid, pid2name[pid], min_free_stack[pid])
  }
}

