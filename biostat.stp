/*
 * By Dominic Duval, Red Hat Inc.
 * dduval@redhat.com
 * 
 * biostatv6.stp :
 *
 * Collect data from I/O devices about which files are causing
 * writebacks to the storage device and match that information
 * with actual file names and mountpoints.
 *
 * USAGE: stap -g biostatv6.stp
 *
 */


global biosizes, filenames, pids, processname

%{
#include <linux/file.h>
#include <linux/dcache.h>
#include <linux/mount.h>
#include <linux/fs.h>
#include <linux/err.h>

%}


probe begin { printf("starting probe\n") }

function bio_rw_number:long(rw:long)
%{ /* pure */
    long rw = (long)THIS->rw;
    THIS->__retvalue = (rw & (1 << BIO_RW));
%}


function fd_to_name:string(fd:long)
%{ /* pure */
	struct file *file;
	struct files_struct *files;	
	struct inode *inode;
	struct task_struct *task;
	const unsigned char *name;
	char buffer[MAXSTRINGLEN];

/* Can't use the following function (not exported!). */
/* Re-implementing here */
/*	files = get_files_struct(current); */
	task_lock(current);
	files = current->files;
	if (files)
		atomic_inc(&files->count);
	task_unlock(current);

	if (!files)
		goto outnolock;


	spin_lock(&files->file_lock);
	file = fcheck_files(files, THIS->fd);
	if (!file)
		goto out_unlock;
	
	name = d_path(file->f_dentry,file->f_vfsmnt, buffer,MAXSTRINGLEN);

	if (IS_ERR(name)) {
		goto out_unlock;
		printk("d_path did not work!\n");
	}
	strlcpy (THIS->__retvalue, name, MAXSTRINGLEN);

out_unlock:
	spin_unlock(&files->file_lock);

outnolock:
	put_files_struct(files);

%}


function fd_to_inode:long(fd:long)
%{ /* pure */
	struct file *file;
	struct files_struct *files;	
	struct inode *inode;
	struct task_struct *task;
	int inodenum = 0;

/* Can't use the following (not exported!) */
/*	files = get_files_struct(current); */
	task_lock(current);
	files = current->files;
	if (files)
		atomic_inc(&files->count);
	task_unlock(current);

	if (!files)
		goto outnolock;


	spin_lock(&files->file_lock);
	file = fcheck_files(files, THIS->fd);
	if (!file)
		goto out_unlock;
	inode = file->f_dentry->d_inode;
	inodenum = inode->i_ino;
		
out_unlock:
	spin_unlock(&files->file_lock);

outnolock:
	put_files_struct(files);
	THIS->__retvalue = inodenum;
%}

probe syscall.read,syscall.write {

	inode = fd_to_inode(fd)
	filenames[inode] = fd_to_name(fd)
	pids[inode] = pid()
	processname[inode] = execname()
}


probe ioblock.request {

	readwrite = bio_rw_number(rw)
	if (ino)
		biosizes[devname, ino, readwrite] += size
}

probe end {
	printf("RW Device Inode PID ProcessName Mountpoint Size\n")
	foreach ([devname, ino, rw] in biosizes- limit 40) {
		if (filenames[ino] == "")
			filenames[ino] = "NONE"
		printf("%s %s %d %d %s %s %d \n", 
			rw ? "WRITE" : "READ",
			devname, 
			ino, 
			pids[ino],
			processname[ino],
			filenames[ino],
			biosizes[devname,ino,rw])
	}
}

